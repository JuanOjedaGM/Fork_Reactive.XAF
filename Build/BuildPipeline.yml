variables:
    - group: keys
    - name: NUGET_PACKAGES
      value: $(Pipeline.Workspace)\.nuget\packages
trigger: none 
jobs:
- job: BuildModules
  strategy: 
    parallel: 1
  pool:
    vmImage: windows-2019
  variables:
    - group: keys
  steps:
    - checkout: self
    - task: CacheBeta@0
      inputs:
        key: 'nuget | "$(CustomVersion)" | paket.lock'
        restoreKeys: |
          nuget | "$(CustomVersion)"
        path: $(NUGET_PACKAGES)
      displayName: Cache NuGet packages
    - task: AzurePowerShell@5
      condition: eq(variables['UseLastVersion'], '')
      name: Build
      inputs:
        errorActionPreference: stop
        azureSubscription: 'Visual Studio Enterprise(b48a609a-17f6-4e48-a317-54ab77fbf822)'
        ScriptType: 'InlineScript'
        azurePowerShellVersion: 'LatestVersion'
        pwsh: true
        Inline: |
          $ErrorView="NormalView"
          "Nugetpackage=$env:Nuget_PACKAGES"
          $ErrorActionPreference="stop"
          $goArgs = @{
              GithubToken              = '$(GitHubToken)'
              AzureToken               = '$(AzureToken)' 
              GitHubUserName           = '$(GitHubUserName)' 
              DXApiFeed                = '$(DXApiFeed)'
              Branch                   = '$(Build.SourceBranchName)'
              SourcePath               = '$(System.DefaultworkingDirectory)'
              ArtifactStagingDirectory = '$(Build.Artifactstagingdirectory)'
              BinDirectory             = '$(System.DefaultworkingDirectory)\bin'
              CustomVersion            = '$(CustomVersion)'
              UseLastVersion           = '$(UseLastVersion)'
              XpandBlobOwnerSecret     = '$(XpandBlobOwnerSecret)'
              AzureApplicationId       = '$(AzureApplicationId)'
              AzureTenantId            = '$(AzureTenantId)'
          }
          "goArgs:"
          $goArgs | Out-String
          $env:AzureToken=$AzureToken
          $env:AzOrganization="eXpandDevops"
          $env:AzProject ="eXpandFramework"
          & '$(System.DefaultWorkingDirectory)\Build\BuildPipeline.ps1' @goArgs
    - task: PublishPipelineArtifact@1
      condition: eq(variables['UseLastVersion'], '')
      name: PublishBin
      inputs:
        targetPath: '$(System.DefaultWorkingDirectory)\bin'
        artifact: 'bin'
        publishLocation: 'pipeline'
    - task: DownloadPipelineArtifact@2
      condition: ne(variables['UseLastVersion'], '')
      name: UseLastVersion
      inputs:
        buildType: 'specific'
        project: 'dc0010e5-9ecf-45ac-b89d-2d51897f3855'
        definition: '23'
        buildVersionToDownload: 'latestFromBranch'
        branchName: 'refs/heads/$(Build.SourceBranchName)'
        tags: '$(CustomVersion)'
        artifactName: 'bin'
        targetPath: '$(System.DefaultWorkingDirectory)\bin'
    # - task: DownloadPipelineArtifact@2
    #   condition: ne(variables['NupkgBuild'], '')
    #   name: UseNupkg
    #   inputs:
    #     buildType: 'specific'
    #     project: 'dc0010e5-9ecf-45ac-b89d-2d51897f3855'
    #     definition: '23'
    #     buildVersionToDownload: 'specific'
    #     pipelineId: '$(NupkgBuild)'
    #     artifactName: 'Nupkg'
    #     targetPath: '$(System.DefaultWorkingDirectory)\bin\Nupkg'
    - task: AzurePowerShell@5
      name: BuildNugetConsumers
      inputs:
        errorActionPreference: stop
        FailOnStandardError: true
        azureSubscription: 'Visual Studio Enterprise(b48a609a-17f6-4e48-a317-54ab77fbf822)'
        ScriptType: 'InlineScript'
        azurePowerShellVersion: 'LatestVersion'
        pwsh: true
        Inline: |
          $ErrorView="NormalView"
          "Nugetpackage=$env:Nuget_PACKAGES"
          $ErrorActionPreference="stop"
          $goArgs = @{
              GithubToken              = '$(GitHubToken)'
              AzureToken               = '$(AzureToken)' 
              GitHubUserName           = '$(GitHubUserName)' 
              DXApiFeed                = '$(DXApiFeed)'
              Branch                   = '$(Build.SourceBranchName)'
              SourcePath               = '$(System.DefaultworkingDirectory)'
              ArtifactStagingDirectory = '$(Build.Artifactstagingdirectory)'
              BinDirectory             = '$(System.DefaultworkingDirectory)\bin'
              CustomVersion            = '$(CustomVersion)'
              UseLastVersion           = '$(UseLastVersion)'
              XpandBlobOwnerSecret     = '$(XpandBlobOwnerSecret)'
              AzureApplicationId       = '$(AzureApplicationId)'
              AzureTenantId            = '$(AzureTenantId)'
          }
          "goArgs:"
          $goArgs | Out-String
          $env:AzureToken='($AzureToken)'
          $env:AzOrganization="eXpandDevops"
          $env:AzProject ="eXpandFramework"
          $goArgs = @{
              packageSources = 'https://xpandnugetserver.azurewebsites.net/nuget;$(DXApiFeed)'
              tasklist       = "BuildNugetConsumers"
              dxVersion      = '$(CustomVersion)'
              Branch         = '$(Build.SourceBranchName)'
          }
          
          & "$(System.DefaultWorkingDirectory)\go.ps1" -InstallModules
          $env:AzureToken='$(AzureToken)'
          $env:AzOrganization="eXpandDevOps"
          $env:AzProject ="eXpandFramework"
          $BuildPastVersion='Yes'
          if ('$(CustomVersion)' -ne (Get-XAFLatestMinors -source '$(DXApiFeed)'|select-object -last 1)){
              $BuildPastVersion='No'
          }
          $parameters = @{
              DxPipelineBuildId = '$(Build.BuildId)'
              CustomVersion = '$(CustomVersion)'
              BuildPastVersion = $BuildPastVersion
              AzStorageLookup = '0'
          }
          Add-AzBuild -Definition DevExpress.XAF-Lab-Tests -Tag '$(CustomVersion)' -Parameters $parameters
          & "$(System.DefaultWorkingDirectory)\go.ps1" @goArgs
    - task: PublishPipelineArtifact@1
      name: PublishNugetConsumers
      inputs:
        targetPath: '$(System.DefaultWorkingDirectory)\bin\'
        artifact: 'NugetConsumers'
        publishLocation: 'pipeline'
    - task: PublishPipelineArtifact@1
      name: PublishNugets
      inputs:
        targetPath: '$(System.DefaultWorkingDirectory)\bin\Nupkg'
        artifact: 'Nupkg'
        publishLocation: 'pipeline'
    
    
